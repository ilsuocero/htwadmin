This is a desktop app part of a wider project called "Hike the World" where there are 
involved three main components. 
1. Administration Site (htwadmin)
2. Server Side hosted on a remote Node.js where a Neo4j database is installed and managed by a Nodejs App
3. Client React Native App (Libre-HtW)

The scope of the project is to build a kind of Google Maps service for outdoors pathways. 
The path network is stored remotely in a Neo4j database and the Nodejs App which is managing it 
is responsible to mantain the database and to provide the path network to the React-native app
along with the navigation info to travel from one destination to another.

The app in this directory, named htwadmin,  is the administration App, which is responsible to create and mantain 
the Path Network. 

The htwadmin is incomplete, written a couple of years ago and needs an update and to be completed.

## SOCKET.IO CONNECTION ARCHITECTURE - LESSONS LEARNED

### üéØ **ARCHITECTURE OVERVIEW**

#### **Single Socket Instance Principle**
- **Only ONE socket instance** for the entire application
- **Centralized management** in Home.js component
- **Props-based distribution** to render components
- **Prevents connection chaos** and state confusion

#### **Component Structure**
```
Home.js ‚Üí useSocket() ‚Üê SINGLE instance!
  ‚Üì
RenderPathNetwork ‚Üí props (socketOperations, isConnected)
RenderDestinations ‚Üí props (socketOperations, isConnected)  
RenderCrossRoads ‚Üí props (socketOperations, isConnected)
```

### üîß **IMPLEMENTATION PATTERNS**

#### **1. Centralized Socket Hook (Home.js)**
```javascript
// Use the centralized socket hook - only when authenticated
const {
    socket,
    isConnected,
    isConnecting,
    error: socketError,
    socketOperations
} = useSocket(authenticated ? connectionState : null);
```

#### **2. Render Components (No useSocket Calls)**
```javascript
// ‚ùå WRONG - Creates multiple instances
const { socketOperations, isConnected } = useSocket(connectionState);

// ‚úÖ CORRECT - Receives props from Home.js
function Component({ connectionState, socketOperations, isConnected }) {
```

#### **3. Socket Service (True Singleton)**
- Maintains single socket instance globally
- Handles reconnection and error recovery
- Manages authentication token updates

### üì° **EVENT NAMING CONVENTION**

